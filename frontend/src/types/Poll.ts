/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type AbstractPollItemStruct = {
  pollId: PromiseOrValue<BigNumberish>;
  votersCount: PromiseOrValue<BigNumberish>;
  candidatesCount: PromiseOrValue<BigNumberish>;
  startTimeStamp: PromiseOrValue<BigNumberish>;
};

export type AbstractPollItemStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  pollId: BigNumber;
  votersCount: BigNumber;
  candidatesCount: BigNumber;
  startTimeStamp: BigNumber;
};

export type VoteStruct = {
  voter: PromiseOrValue<string>;
  candidates: PromiseOrValue<string>[];
  points: PromiseOrValue<BigNumberish>[][];
  comments: PromiseOrValue<string>[];
  perspectiveId: PromiseOrValue<BigNumberish>;
};

export type VoteStructOutput = [
  string,
  string[],
  BigNumber[][],
  string[],
  BigNumber
] & {
  voter: string;
  candidates: string[];
  points: BigNumber[][];
  comments: string[];
  perspectiveId: BigNumber;
};

export type ContributionItemStruct = {
  contributionText: PromiseOrValue<string>;
  evidences: PromiseOrValue<string>[];
  roles: PromiseOrValue<string>[];
  contributor: PromiseOrValue<string>;
  pollId: PromiseOrValue<BigNumberish>;
};

export type ContributionItemStructOutput = [
  string,
  string[],
  string[],
  string,
  BigNumber
] & {
  contributionText: string;
  evidences: string[];
  roles: string[];
  contributor: string;
  pollId: BigNumber;
};

export type DetailPollItemStruct = {
  pollId: PromiseOrValue<BigNumberish>;
  contributions: ContributionItemStruct[];
  voters: PromiseOrValue<string>[];
  startTimeStamp: PromiseOrValue<BigNumberish>;
  endTimeStamp: PromiseOrValue<BigNumberish>;
  perspectives: PromiseOrValue<string>[];
};

export type DetailPollItemStructOutput = [
  BigNumber,
  ContributionItemStructOutput[],
  string[],
  BigNumber,
  BigNumber,
  string[]
] & {
  pollId: BigNumber;
  contributions: ContributionItemStructOutput[];
  voters: string[];
  startTimeStamp: BigNumber;
  endTimeStamp: BigNumber;
  perspectives: string[];
};

export interface PollInterface extends utils.Interface {
  functions: {
    "CONTRIBUTOR_ASSIGNMENT_TOKEN()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "POLL_ADMIN_ROLE()": FunctionFragment;
    "VOTER_ASSIGNMENT_TOKEN()": FunctionFragment;
    "VOTE_MAX_POINT()": FunctionFragment;
    "activePerspective()": FunctionFragment;
    "candidateToCurrentPoll(string,string[],string[])": FunctionFragment;
    "candidates(int256,uint256)": FunctionFragment;
    "changePerspective(string[])": FunctionFragment;
    "contributions(int256,uint256)": FunctionFragment;
    "currentMaxPollId()": FunctionFragment;
    "daoHistoryAddress()": FunctionFragment;
    "daoId()": FunctionFragment;
    "daoTokenAddress()": FunctionFragment;
    "endTimeStamp(int256)": FunctionFragment;
    "getActivePolls()": FunctionFragment;
    "getCurrentCandidates()": FunctionFragment;
    "getCurrentPerspectives()": FunctionFragment;
    "getCurrentVotes()": FunctionFragment;
    "getPerspectives(uint256)": FunctionFragment;
    "getPollDetail(int256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getVoters(int256)": FunctionFragment;
    "getVotes(int256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isEligibleToVote(address)": FunctionFragment;
    "nftAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "perspectives(uint256,uint256)": FunctionFragment;
    "projectId()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setContributorAssignmentToken(uint256)": FunctionFragment;
    "setDaoHistoryAddress(address)": FunctionFragment;
    "setDaoTokenAddress(address)": FunctionFragment;
    "setNftAddress(address)": FunctionFragment;
    "setPollAdminRole(address)": FunctionFragment;
    "setVoteMaxPoint(uint256)": FunctionFragment;
    "setVoterAssignmentToken(uint256)": FunctionFragment;
    "setVotingDuration(int256,uint256)": FunctionFragment;
    "setVotingEnabled(int256,bool)": FunctionFragment;
    "settleCurrentPollAndCreateNewPoll()": FunctionFragment;
    "startTimeStamp(int256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "vote(int256,address[],uint256[][],string[])": FunctionFragment;
    "votes(int256,uint256)": FunctionFragment;
    "votingDuration()": FunctionFragment;
    "votingEnabled()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CONTRIBUTOR_ASSIGNMENT_TOKEN"
      | "DEFAULT_ADMIN_ROLE"
      | "POLL_ADMIN_ROLE"
      | "VOTER_ASSIGNMENT_TOKEN"
      | "VOTE_MAX_POINT"
      | "activePerspective"
      | "candidateToCurrentPoll"
      | "candidates"
      | "changePerspective"
      | "contributions"
      | "currentMaxPollId"
      | "daoHistoryAddress"
      | "daoId"
      | "daoTokenAddress"
      | "endTimeStamp"
      | "getActivePolls"
      | "getCurrentCandidates"
      | "getCurrentPerspectives"
      | "getCurrentVotes"
      | "getPerspectives"
      | "getPollDetail"
      | "getRoleAdmin"
      | "getVoters"
      | "getVotes"
      | "grantRole"
      | "hasRole"
      | "isEligibleToVote"
      | "nftAddress"
      | "owner"
      | "pause"
      | "paused"
      | "perspectives"
      | "projectId"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setContributorAssignmentToken"
      | "setDaoHistoryAddress"
      | "setDaoTokenAddress"
      | "setNftAddress"
      | "setPollAdminRole"
      | "setVoteMaxPoint"
      | "setVoterAssignmentToken"
      | "setVotingDuration"
      | "setVotingEnabled"
      | "settleCurrentPollAndCreateNewPoll"
      | "startTimeStamp"
      | "supportsInterface"
      | "transferOwnership"
      | "unpause"
      | "vote"
      | "votes"
      | "votingDuration"
      | "votingEnabled"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CONTRIBUTOR_ASSIGNMENT_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLL_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTER_ASSIGNMENT_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_MAX_POINT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activePerspective",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateToCurrentPoll",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changePerspective",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMaxPollId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoHistoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "daoId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endTimeStamp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePolls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPerspectives",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPerspectives",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPollDetail",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoters",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligibleToVote",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "perspectives",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "projectId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContributorAssignmentToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoHistoryAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoTokenAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPollAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoteMaxPoint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoterAssignmentToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingDuration",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingEnabled",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleCurrentPollAndCreateNewPoll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTimeStamp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[][],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingEnabled",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRIBUTOR_ASSIGNMENT_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLL_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTER_ASSIGNMENT_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_MAX_POINT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activePerspective",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateToCurrentPoll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePerspective",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMaxPollId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoHistoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivePolls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPerspectives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerspectives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPollDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEligibleToVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "perspectives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projectId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContributorAssignmentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDaoHistoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDaoTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPollAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoteMaxPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoterAssignmentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleCurrentPollAndCreateNewPoll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEnabled",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Poll extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PollInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRIBUTOR_ASSIGNMENT_TOKEN(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    POLL_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    VOTER_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTE_MAX_POINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    activePerspective(overrides?: CallOverrides): Promise<[BigNumber]>;

    candidateToCurrentPoll(
      contributionText: PromiseOrValue<string>,
      evidences: PromiseOrValue<string>[],
      roles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    changePerspective(
      perspectiveTexts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        contributionText: string;
        contributor: string;
        pollId: BigNumber;
      }
    >;

    currentMaxPollId(overrides?: CallOverrides): Promise<[BigNumber]>;

    daoHistoryAddress(overrides?: CallOverrides): Promise<[string]>;

    daoId(overrides?: CallOverrides): Promise<[string]>;

    daoTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    endTimeStamp(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActivePolls(
      overrides?: CallOverrides
    ): Promise<[AbstractPollItemStructOutput[]]>;

    getCurrentCandidates(overrides?: CallOverrides): Promise<[string[]]>;

    getCurrentPerspectives(overrides?: CallOverrides): Promise<[string[]]>;

    getCurrentVotes(overrides?: CallOverrides): Promise<[VoteStructOutput[]]>;

    getPerspectives(
      _perspectiveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPollDetail(
      _pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DetailPollItemStructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoters(
      _pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getVotes(
      _pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[VoteStructOutput[]]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isEligibleToVote(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nftAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    perspectives(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    projectId(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContributorAssignmentToken(
      _contributorAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDaoHistoryAddress(
      _daoHistoryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDaoTokenAddress(
      _daoTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNftAddress(
      _nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPollAdminRole(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVoteMaxPoint(
      _voteMaxPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVoterAssignmentToken(
      _voterAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVotingDuration(
      pollId: PromiseOrValue<BigNumberish>,
      _votingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVotingEnabled(
      pollId: PromiseOrValue<BigNumberish>,
      _votingEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleCurrentPollAndCreateNewPoll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTimeStamp(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vote(
      _pollId: PromiseOrValue<BigNumberish>,
      _candidates: PromiseOrValue<string>[],
      _points: PromiseOrValue<BigNumberish>[][],
      _comments: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { voter: string; perspectiveId: BigNumber }
    >;

    votingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingEnabled(overrides?: CallOverrides): Promise<[boolean]>;
  };

  CONTRIBUTOR_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  POLL_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  VOTER_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

  VOTE_MAX_POINT(overrides?: CallOverrides): Promise<BigNumber>;

  activePerspective(overrides?: CallOverrides): Promise<BigNumber>;

  candidateToCurrentPoll(
    contributionText: PromiseOrValue<string>,
    evidences: PromiseOrValue<string>[],
    roles: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  candidates(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  changePerspective(
    perspectiveTexts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributions(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      contributionText: string;
      contributor: string;
      pollId: BigNumber;
    }
  >;

  currentMaxPollId(overrides?: CallOverrides): Promise<BigNumber>;

  daoHistoryAddress(overrides?: CallOverrides): Promise<string>;

  daoId(overrides?: CallOverrides): Promise<string>;

  daoTokenAddress(overrides?: CallOverrides): Promise<string>;

  endTimeStamp(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActivePolls(
    overrides?: CallOverrides
  ): Promise<AbstractPollItemStructOutput[]>;

  getCurrentCandidates(overrides?: CallOverrides): Promise<string[]>;

  getCurrentPerspectives(overrides?: CallOverrides): Promise<string[]>;

  getCurrentVotes(overrides?: CallOverrides): Promise<VoteStructOutput[]>;

  getPerspectives(
    _perspectiveId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPollDetail(
    _pollId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DetailPollItemStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoters(
    _pollId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getVotes(
    _pollId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<VoteStructOutput[]>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isEligibleToVote(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nftAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  perspectives(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  projectId(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContributorAssignmentToken(
    _contributorAssignmentToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDaoHistoryAddress(
    _daoHistoryAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDaoTokenAddress(
    _daoTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNftAddress(
    _nftAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPollAdminRole(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVoteMaxPoint(
    _voteMaxPoint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVoterAssignmentToken(
    _voterAssignmentToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVotingDuration(
    pollId: PromiseOrValue<BigNumberish>,
    _votingDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVotingEnabled(
    pollId: PromiseOrValue<BigNumberish>,
    _votingEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleCurrentPollAndCreateNewPoll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTimeStamp(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vote(
    _pollId: PromiseOrValue<BigNumberish>,
    _candidates: PromiseOrValue<string>[],
    _points: PromiseOrValue<BigNumberish>[][],
    _comments: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votes(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { voter: string; perspectiveId: BigNumber }>;

  votingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  votingEnabled(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    CONTRIBUTOR_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    POLL_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    VOTER_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_MAX_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    activePerspective(overrides?: CallOverrides): Promise<BigNumber>;

    candidateToCurrentPoll(
      contributionText: PromiseOrValue<string>,
      evidences: PromiseOrValue<string>[],
      roles: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    changePerspective(
      perspectiveTexts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    contributions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        contributionText: string;
        contributor: string;
        pollId: BigNumber;
      }
    >;

    currentMaxPollId(overrides?: CallOverrides): Promise<BigNumber>;

    daoHistoryAddress(overrides?: CallOverrides): Promise<string>;

    daoId(overrides?: CallOverrides): Promise<string>;

    daoTokenAddress(overrides?: CallOverrides): Promise<string>;

    endTimeStamp(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActivePolls(
      overrides?: CallOverrides
    ): Promise<AbstractPollItemStructOutput[]>;

    getCurrentCandidates(overrides?: CallOverrides): Promise<string[]>;

    getCurrentPerspectives(overrides?: CallOverrides): Promise<string[]>;

    getCurrentVotes(overrides?: CallOverrides): Promise<VoteStructOutput[]>;

    getPerspectives(
      _perspectiveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPollDetail(
      _pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DetailPollItemStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoters(
      _pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getVotes(
      _pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<VoteStructOutput[]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isEligibleToVote(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nftAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    perspectives(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    projectId(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContributorAssignmentToken(
      _contributorAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoHistoryAddress(
      _daoHistoryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoTokenAddress(
      _daoTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftAddress(
      _nftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPollAdminRole(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoteMaxPoint(
      _voteMaxPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoterAssignmentToken(
      _voterAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingDuration(
      pollId: PromiseOrValue<BigNumberish>,
      _votingDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingEnabled(
      pollId: PromiseOrValue<BigNumberish>,
      _votingEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleCurrentPollAndCreateNewPoll(overrides?: CallOverrides): Promise<void>;

    startTimeStamp(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vote(
      _pollId: PromiseOrValue<BigNumberish>,
      _candidates: PromiseOrValue<string>[],
      _points: PromiseOrValue<BigNumberish>[][],
      _comments: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { voter: string; perspectiveId: BigNumber }
    >;

    votingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    votingEnabled(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    CONTRIBUTOR_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    POLL_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    VOTER_ASSIGNMENT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_MAX_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    activePerspective(overrides?: CallOverrides): Promise<BigNumber>;

    candidateToCurrentPoll(
      contributionText: PromiseOrValue<string>,
      evidences: PromiseOrValue<string>[],
      roles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changePerspective(
      perspectiveTexts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentMaxPollId(overrides?: CallOverrides): Promise<BigNumber>;

    daoHistoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    daoId(overrides?: CallOverrides): Promise<BigNumber>;

    daoTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    endTimeStamp(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActivePolls(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentCandidates(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPerspectives(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVotes(overrides?: CallOverrides): Promise<BigNumber>;

    getPerspectives(
      _perspectiveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPollDetail(
      _pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoters(
      _pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotes(
      _pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEligibleToVote(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    perspectives(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectId(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContributorAssignmentToken(
      _contributorAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDaoHistoryAddress(
      _daoHistoryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDaoTokenAddress(
      _daoTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNftAddress(
      _nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPollAdminRole(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVoteMaxPoint(
      _voteMaxPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVoterAssignmentToken(
      _voterAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVotingDuration(
      pollId: PromiseOrValue<BigNumberish>,
      _votingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVotingEnabled(
      pollId: PromiseOrValue<BigNumberish>,
      _votingEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleCurrentPollAndCreateNewPoll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTimeStamp(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vote(
      _pollId: PromiseOrValue<BigNumberish>,
      _candidates: PromiseOrValue<string>[],
      _points: PromiseOrValue<BigNumberish>[][],
      _comments: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    votingEnabled(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRIBUTOR_ASSIGNMENT_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POLL_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTER_ASSIGNMENT_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VOTE_MAX_POINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePerspective(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    candidateToCurrentPoll(
      contributionText: PromiseOrValue<string>,
      evidences: PromiseOrValue<string>[],
      roles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changePerspective(
      perspectiveTexts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentMaxPollId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoHistoryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endTimeStamp(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActivePolls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentCandidates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPerspectives(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPerspectives(
      _perspectiveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPollDetail(
      _pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoters(
      _pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotes(
      _pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEligibleToVote(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perspectives(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContributorAssignmentToken(
      _contributorAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDaoHistoryAddress(
      _daoHistoryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDaoTokenAddress(
      _daoTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNftAddress(
      _nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPollAdminRole(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVoteMaxPoint(
      _voteMaxPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVoterAssignmentToken(
      _voterAssignmentToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVotingDuration(
      pollId: PromiseOrValue<BigNumberish>,
      _votingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVotingEnabled(
      pollId: PromiseOrValue<BigNumberish>,
      _votingEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleCurrentPollAndCreateNewPoll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTimeStamp(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      _pollId: PromiseOrValue<BigNumberish>,
      _candidates: PromiseOrValue<string>[],
      _points: PromiseOrValue<BigNumberish>[][],
      _comments: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
